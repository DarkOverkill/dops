// Colors, Fonts
$bg-c: #f1f5f9;
$color-bl: #0048b7;
$text-blue: #1b60b5;

$reg: 'Roboto-Regular';
$bold: 'Roboto-Bold';
$black: 'Roboto-Black';
$light:  'Roboto-Light';


// Socket
@mixin socket {
    width: 1100px;
    margin: auto;
}

// Rotate
@mixin rot($deg) {
    transform: rotate($deg); -webkit-transform: rotate($deg); -moz-transform:rotate($deg); -o-transform:rotate($deg);
}

// Clearfix
@mixin clearfix {
    &:before,
    &:after {
        content: " "; 
        display: table; 
    }
    &:after {
        clear: both;
    }
}

// Background
@mixin sp($x, $y){
    background: url(../images/sprites.png) $x $y;
}

// Full
@mixin full {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
}

// Link Border
@mixin link-bor($col, $colh) {
    text-decoration: none;
    border-bottom: 1px solid $col;
    color: $col;

    &:hover {
        border-color: $colh;
    }
}

// Vertiacl Align Midle
@mixin mdl {
    display: -webkit-flexbox;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    -webkit-flex-align: center;
    -ms-flex-align: center;
    -webkit-align-items: center;
    align-items: center;
}

// Calc 
@mixin calc($property, $expression) { 
    #{$property}: -webkit-calc(#{$expression}); 
    #{$property}: calc(#{$expression}); 
} 

// Border Radius 
@mixin border-rad ($radius) {
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	-ms-border-radius: $radius;
	border-radius: $radius;
}

@mixin border-rad-top ($radius) {
	-webkit-border-radius: $radius $radius 0 0;
	-moz-border-radius: $radius $radius 0 0;
	-ms-border-radius: $radius $radius 0 0;
	border-radius: $radius $radius 0 0;
}

@mixin border-rad-btm ($radius) {
	-webkit-border-radius: 0 0 $radius $radius;
	-moz-border-radius: 0 0 $radius $radius;
	-ms-border-radius: 0 0 $radius $radius;
	border-radius: 0 0 $radius $radius;
}

@mixin border-rad-left ($radius) {
	-webkit-border-radius: $radius 0 0 $radius;
	-moz-border-radius: $radius 0 0 $radius;
	-ms-border-radius: $radius 0 0 $radius;
	border-radius:$radius 0 0 $radius;
}

@mixin border-rad-right ($radius) {
	-webkit-border-radius: 0 $radius $radius 0;
	-moz-border-radius: 0 $radius $radius 0;
	-ms-border-radius: 0 $radius $radius 0;
	border-radius:0 $radius $radius 0;
}

// :after :before
.ps {
	content:"";
	display: block;
	position: absolute;
	top: 0;
}

// Border Opacity
@mixin border-btm-opa($rgba1, $rgba2, $rgba3, $opacity){
	border-bottom: 1px solid rgba($rgba1, $rgba2, $rgba3, $opacity);
	-webkit-background-clip: padding-box; 
	background-clip: padding-box; 
}

// Transition 
@mixin transition($transition-property, $transition-time, $method){
    -webkit-transition: $transition-property $transition-time $method;
    -ms-transition: $transition-property $transition-time $method;
    -o-transition: $transition-property $transition-time $method;
    transition: $transition-property $transition-time $method;
}   

.trans-all {
    transition: all 0.7s ease-in-out; 
    -webkit-transition: all 0.7s ease-in-out; 
    -ms-transition: all 0.7s ease-in-out;
}

@mixin trans($time) {
    transition: all $time ease-out; 
    -webkit-transition: all $time ease-out; 
    -ms-transition: all $time ease-out;
}

@mixin delay($time){
    -webkit-transition-delay: $time; 
    -o-transition-delay:$time; 
    transition-delay: $time; 
}

@mixin a-delay($time){
    animation-delay: $time;
    -webkit-animation-delay: $time; 
}

@mixin a-time($time){
    animation-duration: $time;
    -webkit-animation-duration: $time; 
}

// Border Boxing
@mixin border-box {
	box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;  
}

// Arrows
@mixin tr-top($bwr, $bwb, $bwl, $col) {
    width: 0; height: 0; border-style: solid; border-width: 0 $bwr $bwb $bwl; border-color:  transparent transparent $col transparent;
}

@mixin tr-right($bwt, $bwb, $bwl, $col) {
    width: 0; height: 0; border-style: solid; border-width:  $bwt 0 $bwb $bwl; border-color:   transparent transparent transparent $col;
}

@mixin tr-bottom($bwt, $bwr, $bwl, $col) {
    width: 0; height: 0; border-style: solid; border-width: $bwt $bwr 0  $bwl; border-color: $col  transparent transparent transparent;
}

@mixin tr-left($bwt, $bwr, $bwb, $col) {
    width: 0; height: 0; border-style: solid; border-width: $bwt $bwr $bwb 0; border-color: transparent $col   transparent transparent;
}

@mixin ty($val){
    transform: translateY($val);
    -webkit-transform: translateY($val);
    -ms-transform: translateY($val);
}

@mixin st($size, $color, $deg) {
    position: absolute; display: block; width: $size; height: $size;  border-left-color: $color; pointer-events: none; border-right: 1px solid $color; border-top: 1px solid $color; 
    transform: rotate($deg); -webkit-transform: rotate($deg); -moz-transform:rotate($deg); -o-transform:rotate($deg);
}

// arctan function
@function power ($x, $n) {
    $ret: 1;
    
    @if $n >= 0 {
        @for $i from 1 through $n {
            $ret: $ret * $x;
        } 
    } @else {
        @for $i from $n to 0 {
            $ret: $ret / $x;
        }
    }
    
    @return $ret;
}

@function atan ($x) {
  $ret: 0;

  @for $n from 0 to 25 {
    $ret: $ret + power(-1, $n) * power($x, 2 * $n + 1) / (2 * $n + 1);
  }

  @return $ret;
}